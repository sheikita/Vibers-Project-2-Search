import { useState, useEffect } from "react";
import { useMutation } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";

interface ContentItem {
  title: string;
  url: string;
  source?: string;
  description?: string;
  thumbnail?: string;
  publishedAt?: string;
  author?: string;
  channelTitle?: string;
}

interface SearchResult {
  id: number;
  content: {
    youtube: ContentItem | null;
    googleNews: ContentItem | null;
    substack: ContentItem | null;
    googleNewsRss: ContentItem[] | null;
    substackArticles: ContentItem[] | null;
  };
  summary: string;
  slackScheduled: boolean;
}

export default function Home() {
  const [selectedCategory, setSelectedCategory] = useState("");
  const [searchResult, setSearchResult] = useState<SearchResult | null>(null);
  const [slackScheduled, setSlackScheduled] = useState(false);
  const [countdown, setCountdown] = useState(0);
  const { toast } = useToast();

  const categories = [
    { value: "ai", label: "ü§ñ Artificial Intelligence" },
    { value: "bollywood", label: "üé¨ Bollywood & Entertainment" },
    { value: "pets", label: "üêæ Pets & Animals" },
    { value: "sports", label: "‚öΩ Sports & Fitness" },
    { value: "tech", label: "üíª Technology & Innovation" }
  ];

  const categoryColorMap: Record<string, string> = {
    ai: "border-blue-300 bg-blue-50 text-blue-700",
    bollywood: "border-pink-300 bg-pink-50 text-pink-700",
    pets: "border-green-300 bg-green-50 text-green-700",
    sports: "border-orange-300 bg-orange-50 text-orange-700",
    tech: "border-purple-300 bg-purple-50 text-purple-700"
  };

  // Mock API function for Netlify deployment (replace with Netlify Functions)
  const mockAPIRequest = async (endpoint: string, data?: any): Promise<any> => {
    // This is a placeholder - in a real Netlify deployment, 
    // you would replace this with Netlify Functions or external APIs
    
    if (endpoint === "/api/search") {
      await new Promise(resolve => setTimeout(resolve, 2000)); // Simulate API delay
      
      const mockContent = {
        youtube: {
          title: `Latest ${data.category.toUpperCase()} Video Content`,
          url: "https://youtube.com/example",
          description: "Mock video content for demonstration",
          thumbnail: "https://via.placeholder.com/320x180",
          channelTitle: "Demo Channel",
          publishedAt: new Date().toISOString()
        },
        googleNews: {
          title: `Breaking ${data.category.toUpperCase()} News`,
          url: "https://news.google.com/example",
          description: "Mock news article for demonstration",
          source: "Demo News",
          publishedAt: new Date().toISOString()
        },
        substack: {
          title: `In-depth ${data.category.toUpperCase()} Analysis`,
          url: "https://substack.com/example",
          description: "Mock Substack article for demonstration",
          author: "Demo Author",
          source: "Demo Newsletter",
          publishedAt: new Date().toISOString()
        },
        googleNewsRss: [
          {
            title: `Related ${data.category.toUpperCase()} Article 1`,
            url: "https://example.com/article1",
            description: "First related article",
            source: "News Source 1",
            publishedAt: new Date().toISOString()
          },
          {
            title: `Related ${data.category.toUpperCase()} Article 2`,
            url: "https://example.com/article2", 
            description: "Second related article",
            source: "News Source 2",
            publishedAt: new Date().toISOString()
          }
        ],
        substackArticles: [
          {
            title: `${data.category.toUpperCase()} Newsletter #1`,
            url: "https://newsletter1.substack.com/example",
            description: "First newsletter article",
            author: "Newsletter Author 1",
            source: "Newsletter 1",
            publishedAt: new Date().toISOString()
          },
          {
            title: `${data.category.toUpperCase()} Newsletter #2`,
            url: "https://newsletter2.substack.com/example",
            description: "Second newsletter article", 
            author: "Newsletter Author 2",
            source: "Newsletter 2",
            publishedAt: new Date().toISOString()
          }
        ]
      };

      const mockSummary = `This is a demo summary for ${data.category} content. In a real deployment, this would be generated by AI based on the aggregated content from multiple sources including YouTube, Google News, and Substack articles.`;

      return {
        id: Math.floor(Math.random() * 1000),
        content: mockContent,
        summary: mockSummary,
        slackScheduled: false
      };
    }

    if (endpoint.startsWith("/api/slack/schedule/")) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      return { success: true, message: "Scheduled successfully" };
    }

    throw new Error("API endpoint not implemented");
  };

  // Search mutation
  const searchMutation = useMutation({
    mutationFn: async (category: string) => {
      return await mockAPIRequest("/api/search", { category });
    },
    onSuccess: (data) => {
      setSearchResult(data);
      setSlackScheduled(false);
      toast({
        title: "Search Completed",
        description: "Content aggregated successfully (demo mode).",
      });
    },
    onError: (error) => {
      toast({
        title: "Search Failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Slack scheduling mutation
  const slackMutation = useMutation({
    mutationFn: async (searchResultId: number) => {
      return await mockAPIRequest(`/api/slack/schedule/${searchResultId}`);
    },
    onSuccess: () => {
      setSlackScheduled(true);
      setCountdown(60);
      toast({
        title: "Slack Post Scheduled (Demo)",
        description: "In production, this would post to Slack in 1 minute.",
      });
    },
    onError: (error) => {
      toast({
        title: "Slack Scheduling Failed",
        description: `Error: ${error.message}`,
        variant: "destructive",
      });
    },
  });

  // Countdown timer effect
  useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);
      return () => clearTimeout(timer);
    }
  }, [countdown]);

  const formatCountdown = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleSearch = () => {
    if (selectedCategory) {
      searchMutation.mutate(selectedCategory);
    }
  };

  return (
    <div className="bg-gray-50 font-inter text-gray-900 min-h-screen">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <i className="fas fa-search text-white text-lg"></i>
              </div>
              <h1 className="text-2xl sm:text-3xl font-bold text-gray-900">Simple Sheikita's Search</h1>
            </div>
            <div className="flex items-center space-x-4">
              <div className="hidden sm:flex items-center space-x-2 text-sm text-gray-500">
                <i className="fas fa-globe"></i>
                <span>Multi-source news aggregation</span>
              </div>
              <Badge variant="outline" className="text-purple-600 border-purple-200">
                <i className="fas fa-rocket mr-1"></i>
                Simplified Version
              </Badge>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6 lg:py-8">
        {/* Demo Notice */}
        <Card className="mb-8 bg-yellow-50 border-yellow-200">
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <i className="fas fa-info-circle text-yellow-600"></i>
              <div>
                <h3 className="font-semibold text-yellow-800">Demo Mode</h3>
                <p className="text-sm text-yellow-700">
                  This is a simplified version with mock data. For Netlify deployment, integrate with Netlify Functions for real API calls.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Control Panel */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="text-lg font-semibold text-gray-900 flex items-center">
              <i className="fas fa-sliders-h text-blue-500 mr-2"></i>
              Search Controls
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-end">
              <div className="flex-1 w-full sm:w-auto">
                <label className="block text-sm font-medium text-gray-700 mb-2" htmlFor="category-select">
                  Select Category
                </label>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger className="w-full" id="category-select" aria-label="Select news category">
                    <SelectValue placeholder="Choose a category..." />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map((category) => (
                      <SelectItem key={category.value} value={category.value}>
                        {category.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <Button 
                onClick={handleSearch}
                disabled={!selectedCategory || searchMutation.isPending}
                className="w-full sm:w-auto min-w-[140px] bg-blue-600 hover:bg-blue-700 text-white"
                aria-label="Search for news in selected category"
              >
                {searchMutation.isPending ? (
                  <>
                    <i className="fas fa-spinner fa-spin mr-2" aria-hidden="true"></i>
                    <span>Searching...</span>
                  </>
                ) : (
                  <>
                    <i className="fas fa-newspaper mr-2" aria-hidden="true"></i>
                    <span>Get News</span>
                  </>
                )}
              </Button>
            </div>
            
            {selectedCategory && (
              <div className={`mt-4 p-3 rounded-lg border-l-4 ${categoryColorMap[selectedCategory]}`}>
                <div className="flex items-center space-x-2">
                  <i className="fas fa-info-circle"></i>
                  <span className="text-sm font-medium">Selected:</span>
                  <span className="font-semibold">
                    {categories.find(c => c.value === selectedCategory)?.label}
                  </span>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Loading State */}
        {searchMutation.isPending && (
          <Card className="mb-8">
            <CardContent className="p-8">
              <div className="text-center">
                <div className="inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4">
                  <i className="fas fa-spinner fa-spin text-blue-600 text-2xl"></i>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Fetching Content</h3>
                <p className="text-gray-600">Gathering news from multiple sources...</p>
                <div className="mt-4 space-y-2">
                  <div className="flex items-center justify-center space-x-2 text-sm text-gray-500">
                    <i className="fas fa-circle-notch fa-spin"></i>
                    <span>Searching YouTube...</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2 text-sm text-gray-500">
                    <i className="fas fa-circle-notch fa-spin"></i>
                    <span>Fetching Google News...</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2 text-sm text-gray-500">
                    <i className="fas fa-circle-notch fa-spin"></i>
                    <span>Collecting Substack articles...</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Search Results */}
        {searchResult && !searchMutation.isPending && (
          <div className="space-y-6">
            {/* AI Summary */}
            <Card className="bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200">
              <CardHeader>
                <CardTitle className="text-xl font-bold text-gray-900 flex items-center">
                  <i className="fas fa-brain text-blue-600 mr-3"></i>
                  AI-Generated Summary
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-800 leading-relaxed text-lg">{searchResult.summary}</p>
                
                {/* Slack Scheduling */}
                <div className="mt-6 pt-4 border-t border-blue-200">
                  {!slackScheduled ? (
                    <Button
                      onClick={() => slackMutation.mutate(searchResult.id)}
                      disabled={slackMutation.isPending}
                      className="bg-green-600 hover:bg-green-700 text-white"
                    >
                      {slackMutation.isPending ? (
                        <>
                          <i className="fas fa-spinner fa-spin mr-2"></i>
                          <span>Scheduling...</span>
                        </>
                      ) : (
                        <>
                          <i className="fab fa-slack mr-2"></i>
                          <span>Schedule to Slack</span>
                        </>
                      )}
                    </Button>
                  ) : (
                    <div className="flex items-center space-x-2 text-green-700">
                      <i className="fas fa-check-circle"></i>
                      <span className="font-medium">
                        {countdown > 0 
                          ? `Posting to Slack in ${formatCountdown(countdown)}`
                          : "Posted to Slack! ‚úì"
                        }
                      </span>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Content Sources */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* YouTube Content */}
              {searchResult.content.youtube && (
                <Card className="border-red-200 hover:border-red-300 transition-colors">
                  <CardHeader className="bg-red-50">
                    <CardTitle className="text-lg font-semibold flex items-center text-red-800">
                      <i className="fab fa-youtube text-red-600 mr-2"></i>
                      YouTube Video
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4">
                    <h3 className="font-semibold text-gray-900 mb-2">{searchResult.content.youtube.title}</h3>
                    <p className="text-gray-600 text-sm mb-3">{searchResult.content.youtube.description}</p>
                    <div className="flex items-center justify-between text-xs text-gray-500">
                      <span>{searchResult.content.youtube.channelTitle}</span>
                      <span>{new Date(searchResult.content.youtube.publishedAt!).toLocaleDateString()}</span>
                    </div>
                    <a 
                      href={searchResult.content.youtube.url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="inline-flex items-center mt-3 text-red-600 hover:text-red-800 font-medium"
                    >
                      <span>Watch Video</span>
                      <i className="fas fa-external-link-alt ml-1 text-xs"></i>
                    </a>
                  </CardContent>
                </Card>
              )}

              {/* Google News */}
              {searchResult.content.googleNews && (
                <Card className="border-blue-200 hover:border-blue-300 transition-colors">
                  <CardHeader className="bg-blue-50">
                    <CardTitle className="text-lg font-semibold flex items-center text-blue-800">
                      <i className="fas fa-newspaper text-blue-600 mr-2"></i>
                      Google News
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4">
                    <h3 className="font-semibold text-gray-900 mb-2">{searchResult.content.googleNews.title}</h3>
                    <p className="text-gray-600 text-sm mb-3">{searchResult.content.googleNews.description}</p>
                    <div className="flex items-center justify-between text-xs text-gray-500">
                      <span>{searchResult.content.googleNews.source}</span>
                      <span>{new Date(searchResult.content.googleNews.publishedAt!).toLocaleDateString()}</span>
                    </div>
                    <a 
                      href={searchResult.content.googleNews.url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="inline-flex items-center mt-3 text-blue-600 hover:text-blue-800 font-medium"
                    >
                      <span>Read Article</span>
                      <i className="fas fa-external-link-alt ml-1 text-xs"></i>
                    </a>
                  </CardContent>
                </Card>
              )}

              {/* Substack Content */}
              {searchResult.content.substack && (
                <Card className="border-orange-200 hover:border-orange-300 transition-colors">
                  <CardHeader className="bg-orange-50">
                    <CardTitle className="text-lg font-semibold flex items-center text-orange-800">
                      <i className="fas fa-edit text-orange-600 mr-2"></i>
                      Substack Article
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="p-4">
                    <h3 className="font-semibold text-gray-900 mb-2">{searchResult.content.substack.title}</h3>
                    <p className="text-gray-600 text-sm mb-3">{searchResult.content.substack.description}</p>
                    <div className="flex items-center justify-between text-xs text-gray-500">
                      <span>By {searchResult.content.substack.author}</span>
                      <span>{new Date(searchResult.content.substack.publishedAt!).toLocaleDateString()}</span>
                    </div>
                    <a 
                      href={searchResult.content.substack.url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="inline-flex items-center mt-3 text-orange-600 hover:text-orange-800 font-medium"
                    >
                      <span>Read Full Article</span>
                      <i className="fas fa-external-link-alt ml-1 text-xs"></i>
                    </a>
                  </CardContent>
                </Card>
              )}
            </div>

            {/* Related Articles */}
            {searchResult.content.googleNewsRss && searchResult.content.googleNewsRss.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg font-semibold flex items-center text-gray-900">
                    <i className="fas fa-rss text-orange-500 mr-2"></i>
                    Related News Articles
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {searchResult.content.googleNewsRss.map((article, index) => (
                      <div key={index} className="border-l-4 border-gray-200 pl-4 hover:border-blue-400 transition-colors">
                        <h4 className="font-medium text-gray-900 mb-1">{article.title}</h4>
                        <p className="text-sm text-gray-600 mb-2">{article.description}</p>
                        <div className="flex items-center justify-between text-xs text-gray-500">
                          <span>{article.source}</span>
                          <a 
                            href={article.url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="text-blue-600 hover:text-blue-800 font-medium"
                          >
                            Read more ‚Üí
                          </a>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Newsletter Articles */}
            {searchResult.content.substackArticles && searchResult.content.substackArticles.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg font-semibold flex items-center text-gray-900">
                    <i className="fas fa-envelope text-purple-500 mr-2"></i>
                    Newsletter Articles
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {searchResult.content.substackArticles.map((article, index) => (
                      <div key={index} className="border-l-4 border-gray-200 pl-4 hover:border-purple-400 transition-colors">
                        <h4 className="font-medium text-gray-900 mb-1">{article.title}</h4>
                        <p className="text-sm text-gray-600 mb-2">{article.description}</p>
                        <div className="flex items-center justify-between text-xs text-gray-500">
                          <span>By {article.author}</span>
                          <a 
                            href={article.url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="text-purple-600 hover:text-purple-800 font-medium"
                          >
                            Read newsletter ‚Üí
                          </a>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </div>
        )}
      </main>
    </div>
  );
}